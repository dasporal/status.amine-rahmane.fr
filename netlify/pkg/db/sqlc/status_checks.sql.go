// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: status_checks.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getRecentStatusChecks = `-- name: GetRecentStatusChecks :many
SELECT check_id, timestamp, status_code, response_time, status, details
FROM status_checks
WHERE website_id = $1
AND timestamp >= NOW() - '1 day'::INTERVAL
ORDER BY timestamp DESC
`

type GetRecentStatusChecksRow struct {
	CheckID      int32
	Timestamp    pgtype.Timestamptz
	StatusCode   pgtype.Int4
	ResponseTime pgtype.Int4
	Status       pgtype.Text
	Details      pgtype.Text
}

func (q *Queries) GetRecentStatusChecks(ctx context.Context, websiteID int32) ([]GetRecentStatusChecksRow, error) {
	rows, err := q.db.Query(ctx, getRecentStatusChecks, websiteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentStatusChecksRow
	for rows.Next() {
		var i GetRecentStatusChecksRow
		if err := rows.Scan(
			&i.CheckID,
			&i.Timestamp,
			&i.StatusCode,
			&i.ResponseTime,
			&i.Status,
			&i.Details,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertStatusCheck = `-- name: InsertStatusCheck :exec
INSERT INTO status_checks (website_id, status_code, response_time, status, details)
VALUES ($1, $2, $3, $4, $5)
`

type InsertStatusCheckParams struct {
	WebsiteID    int32
	StatusCode   pgtype.Int4
	ResponseTime pgtype.Int4
	Status       pgtype.Text
	Details      pgtype.Text
}

func (q *Queries) InsertStatusCheck(ctx context.Context, arg InsertStatusCheckParams) error {
	_, err := q.db.Exec(ctx, insertStatusCheck,
		arg.WebsiteID,
		arg.StatusCode,
		arg.ResponseTime,
		arg.Status,
		arg.Details,
	)
	return err
}
